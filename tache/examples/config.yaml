# Rule / Global/ Direct (default is Rule)
mode: rule

# set log level to stdout (default is info)
# info / warning / error / debug / silent
log-level: info

# API for tache
api:
  listen: 127.0.0.1:9090
  # Secret for RESTful API (Optional)
  secret: ""
  # you can put the static web resource (such as tache-dashboard) to a directory, and tache would serve in `${API}/ui`
  # input is a relative path to the configuration directory or an absolute path
  external-ui: folder

dns:
  ipv6: false # default is false
  listen: 0.0.0.0:53
  mode: redir-host # or fake-ip
  # fake-ip-range: 198.18.0.1/16 # if you don't know what it is, don't change it
  servers:
    - 114.114.114.114
    - tls://dns.rubyfish.cn:853 # dns over tls
    - https://1.1.1.1/dns-query # dns over https
  fallback: # concurrent request with nameserver, fallback used when GEOIP country isn't CN
    - tcp://1.1.1.1

no_delay: true # default is false

inbounds:
  # port of HTTP
  - name: http1
    kind: http
    listen: 0.0.0.0:8901
    #authentication:
    #  - "user1:pass1"
    #  - "user2:pass2"

#  # port of SOCKS5
#  - name: socks1
#    kind: socks5
#    listen: 0.0.0.0:8902
#    #authentication:
#    #  - "user1:pass1"
#    #  - "user2:pass2"
#
#  # redir port for Linux and macOS
#  - name: redir1
#    kind: redir
#    listen: 0.0.0.0:8903
#
#  # tun interface
#  - name: tun1
#    kind: tun

proxies:
  # shadowsocks
  # The kinds of cipher are consistent with go-shadowsocks2
  # support AEAD_AES_128_GCM AEAD_AES_192_GCM AEAD_AES_256_GCM AEAD_CHACHA20_POLY1305 AES-128-CTR AES-192-CTR AES-256-CTR AES-128-CFB AES-192-CFB AES-256-CFB CHACHA20-IETF XCHACHA20
  # In addition to what go-shadowsocks2 supports, it also supports chacha20 rc4-md5 xchacha20-ietf-poly1305
  - { name: "ss1", kind: shadowsocks, address: server:2019, cipher: AEAD_CHACHA20_POLY1305, password: "password", udp: true }

  # vmess
  # cipher support auto/aes-128-gcm/chacha20-poly1305/none
  - { name: "vmess", kind: vmess, address: server:2019, uuid: uuid, alterId: 32, cipher: auto }
  # with tls
  - { name: "vmess", kind: vmess, address: server:2019, uuid: uuid, alterId: 32, cipher: auto, tls: true }
  # with tls and skip-cert-verify
  - { name: "vmess", kind: vmess, address: server:2019, uuid: uuid, alterId: 32, cipher: auto, tls: true, skip-cert-verify: true }
  # with ws-path and ws-headers
  - { name: "vmess", kind: vmess, address: server:2019, uuid: uuid, alterId: 32, cipher: auto, network: ws, ws-path: /path, ws-headers: { Host: v2ray.com } }
  # with ws + tls
  - { name: "vmess", kind: vmess, address: server:2019, uuid: uuid, alterId: 32, cipher: auto, network: ws, ws-path: /path, tls: true }

  # socks5
  - { name: "socks", kind: socks5, address: server:2019 }
  # socks5 with authentication
  - { name: "socks", kind: socks5, address: server:2019, username: "username", password: "password" }
  # with tls
  - { name: "socks", kind: socks5, address: server:2019, tls: true }
  # with tls and skip-cert-verify
  - { name: "socks", kind: socks5, address: server:2019, tls: true, skip-cert-verify: true }

  # http
  - { name: "http", kind: http, address: server:2019 }
  # http with authentication
  - { name: "http", kind: http, address: server:2019, username: "username", password: "password" }
  # with tls (https)
  - { name: "http", kind: http, address: server:2019, tls: true }
  # with tls (https) and skip-cert-verify
  - { name: "http", kind: http, address: server:2019, tls: true, skip-cert-verify: true }

proxy-groups:
  # url-test select which proxy will be used by benchmarking speed to a URL.
  - { name: "auto", kind: url-test, proxies: ["ss1", "ss2", "vmess1"], url: "http://www.gstatic.com/generate_204", interval: 300 }

  # fallback select an available policy by priority. The availability is tested by accessing an URL, just like an auto url-test group.
  - { name: "fallback-auto", kind: fallback, proxies: ["ss1", "ss2", "vmess1"], url: "http://www.gstatic.com/generate_204", interval: 300 }

  # load-balance: The request of the same eTLD will be dial on the same proxy.
  - { name: "load-balance", kind: load-balance, proxies: ["ss1", "ss2", "vmess1"], url: "http://www.gstatic.com/generate_204", interval: 300 }

rules:
  - { kind: "DOMAIN-SUFFIX", source: ["http1", "socks1"], params: ["google.com"], target: auto }
  - { kind: "DOMAIN-KEYWORD", source: ["http1", "socks1"], params: ["google"], target: auto }
  - { kind: "DOMAIN", source: ["http1", "socks1"], params: ["google.com"], target: auto}
  - { kind: "DOMAIN-SUFFIX",source: ["http1", "socks1"], params: ["ad.com"], target: REJECT}
  - { kind: "IP-CIDR", source: ["http1", "socks1"], params: ["127.0.0.0/8"], target: DIRECT}
  # rename SOURCE-IP-CIDR and would remove after prerelease
  - { kind: "SRC-IP-CIDR", source: ["http1", "socks1"], params: ["192.168.1.201/32"], target: DIRECT}
  - { kind: "GEOIP", source: ["http1", "socks1"], params: ["CN"], target: DIRECT}
  - { kind: "DST-PORT", source: ["http1", "socks1"], params: [80], target: DIRECT}
  - { kind: "SRC-PORT", source: ["http1", "socks1"], params: [7777], target: DIRECT}
  # FINAL would remove after prerelease
  # you also can use `FINAL,Proxy` or `FINAL,,Proxy` now
  - { kind: "MATCH", source: ["http1", "socks1"], target: auto}